# Copyright 2020 The Periph Authors. All rights reserved.
# Use of this source code is governed under the Apache License, Version 2.0
# that can be found in the LICENSE file.

# References:
# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions
# https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions/
# https://github.com/actions/cache
# https://github.com/actions/checkout
# https://github.com/actions/setup-go

on: [push, pull_request]
name: Run tests
jobs:
  test_all:
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        gover: ['1.14.3']
    runs-on: "${{matrix.os}}"
    name: "go${{matrix.gover}} on ${{matrix.os}}"
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: "^${{matrix.gover}}"
    - uses: actions/checkout@v2
    - name: 'Cache: ~/go/pkg/mod'
      uses: actions/cache@v1
      with:
        path: "~/go/pkg/mod"
        # TODO(maruel): The key is wrong, as we also want to update the cache
        # when the fetched tools are updated. The problem is that packages
        # golang.org/x/... are always new since they are not versioned but under
        # active development. Shrug.
        key: "${{runner.os}}-gopkg-${{hashFiles('**/go.sum')}}"
        restore-keys: "${{runner.os}}-gopkg-"
    - name: 'go get necessary tools'
      run: >
        go get -u
        github.com/gordonklaus/ineffassign
        golang.org/x/lint/golint
        golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow
        honnef.co/go/tools/cmd/staticcheck
    - name: "Debug (posix)"
      if: matrix.os != 'windows-latest'
      run: |
        echo GOPATH = $GOPATH
        echo GOROOT = $GOROOT
        echo HOME = $HOME
        echo GITHUB_WORKSPACE = $GITHUB_WORKSPACE
        echo PATH = $PATH
        echo ""
        echo pwd = $(pwd)
        echo $ ls -la
        ls -la
        echo ""
        echo $ ls -la $HOME
        ls -la $HOME
        echo ""
        echo $ ls -la $HOME/go
        ls -la $HOME/go
        echo ""
        echo $ ls -la $HOME/go/bin
        ls -la $HOME/go/bin
    - name: "Debug (windows)"
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo GOPATH = %GOPATH%
        echo GOROOT = %GOROOT%
        echo USERPROFILE = %USERPROFILE%
        echo GITHUB_WORKSPACE = %GITHUB_WORKSPACE%
        echo PATH = %PATH%
        echo cd = %CD%
        dir /a
        dir /a %USERPROFILE%
        dir /a %USERPROFILE%\go
        dir /a %USERPROFILE%\go\bin
    - name: 'Check: go vet'
      run: go vet ./...
    - name: 'Check: go vet shadow; shadowed variables (posix)'
      if: matrix.os != 'windows-latest'
      run: go vet -vettool=$(which shadow) ./...
      #  |& grep -v '"err"' | grep -e '^[^#]'
    - name: 'Check: go vet shadow; shadowed variables (windows)'
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: go vet -vettool=%USERPROFILE%/go/bin/shadow.exe ./...
    - name: 'Check: golint'
      run: golint -set_exit_status ./...
    - name: 'Check: inefficient variable assignment'
      run: ineffassign .
    - name: 'Check: staticcheck'
      run: staticcheck -checks -U1000 ./...

      # The following checks are not dependent on the OS or go build tags. Only
      # run them on ubuntu-latest since it's the fastest one.
    - name: 'go get necessary tools (ubuntu)'
      if: matrix.os == 'ubuntu-latest'
      run: >
        go get -u
        github.com/client9/misspell/cmd/misspell
        github.com/google/addlicense
    - name: 'Check: no executable was committed (ubuntu)'
      if: matrix.os == 'ubuntu-latest'
      run: if find . -path ./systemd/setup.sh -prune -o -path ./.git -prune -o -type f -executable -print | grep -e . ; then echo 'Do not commit executables'; false; fi
    - name: 'Check: gofmt; code is well formatted (ubuntu)'
      if: matrix.os == 'ubuntu-latest'
      run: |
        DIFF=$(sh -c "gofmt -s ." 2>&1)
        DIFF="$(gofmt -s -d .)"
        if ! test -z "$DIFF"; then
          echo "$DIFF"
          false
        fi
    - name: 'Check: addlicense; all sources have a license header (ubuntu)'
      if: matrix.os == 'ubuntu-latest'
      run: addlicense -check addlicense .
    - name: "Check: misspelling; code doesn't contain misspelling (ubuntu)"
      if: matrix.os == 'ubuntu-latest'
      run: |
        ERR=$(misspell .)
        if ! test -z "$ERR"; then
          echo "$ERR"
          false
        fi
      # Run tests last since it's potentially the slowest step.
    - name: 'Check: go test -cover (posix)'
      if: matrix.os != 'windows-latest'
      run: go test -covermode=count -coverprofile=coverage.txt ./...
    - name: 'Check: go test -cover (windows)'
      if: matrix.os == 'windows-latest'
      # Powershell messes things up.
      shell: cmd
      run: go test -covermode=count -coverprofile=coverage.txt ./...
    - uses: codecov/codecov-action@v1
    - name: 'Check: go test -race'
      run: go test -race ./...
